{"version":3,"sources":["hoc/Auxiliary.js","components/Layout/Layout.js","components/Burger/BurgerIngredents/BurgerIngredient.js","components/Burger/Burger.js","components/Burger/BuiltControls/BuiltControl/BuiltControl.js","components/Burger/BuiltControls/BuiltControls.js","containers/BurgerBuilder/BurgerBuilder.js","App.js","serviceWorker.js","index.js"],"names":["auxiliary","props","children","layout","react_default","a","createElement","Auxiliary","className","burgerIngredient","ingredient","type","PropTypes","string","isRequired","burger","transformedIngredients","Object","keys","ingredients","map","igKey","toConsumableArray","Array","_","i","BurgerIngredents_BurgerIngredient","key","reduce","arr","el","concat","length","builtControl","label","onClick","removed","disabled","added","controls","builtControls","price","ctrl","BuiltControl_BuiltControl","ingredientAdded","ingredientRemoved","purchasable","ordered","INGREDIENT_PRICES","salad","cheese","mear","bacon","BurgerBuilder","state","meat","totalPrice","addIngredientHandler","updatedCount","_this","updatedIngredients","objectSpread","priceAddition","newPrice","setState","updatePurchaseState","removeIngredientHandler","oldCount","priceDeduction","sum","this","disabledInfo","Burger_Burger","BuiltControls_BuiltControls","Component","App","Layout_Layout","containers_BurgerBuilder_BurgerBuilder","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.bc07139a.chunk.js","sourcesContent":["const auxiliary = (props) => props.children;\r\n\r\nexport default auxiliary;\r\n","import React from 'react';\r\nimport Auxiliary from '../../hoc/Auxiliary';\r\nimport  './Layout.css';\r\n\r\nconst layout = (props) => (\r\n    <Auxiliary>\r\n    <div>Toolsbar, Sidebar, Backdrop</div>\r\n    <main className=\"Content\">\r\n        {props.children}\r\n    </main>\r\n    </Auxiliary>\r\n);\r\n\r\nexport default layout;\r\n\r\n","import React from 'react';\r\nimport BurgerBuilder from '../../../containers/BurgerBuilder/BurgerBuilder';\r\nimport './BurgerIngredient.css';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst burgerIngredient = (props) => {\r\n    let ingredient = null;\r\n\r\n    switch(props.type) {\r\n        case ('bread-bottom'):\r\n            ingredient = <div className=\"BreadBottom\"></div>;\r\n            break;\r\n        case ('bread-top'):\r\n            ingredient = (\r\n                <div className=\"BreadTop\">\r\n                    <div className=\"Seeds1\"></div>\r\n                 </div>\r\n            );\r\n            break;\r\n        case ('meat'):\r\n            ingredient = <div className=\"Meat\"></div>;\r\n            break;\r\n        case ('cheese'):\r\n            ingredient = <div className=\"Cheese\"></div>;\r\n            break;\r\n        case ('bacon'):\r\n            ingredient = <div className=\"Bacon\"></div>;\r\n            break;\r\n        case ('salad'):\r\n            ingredient = <div className=\"Salad\"></div>;\r\n            break;\r\n        default:\r\n            ingredient = null;\r\n            break;\r\n    }\r\n    return ingredient;\r\n}\r\n\r\nburgerIngredient.PropTypes = {\r\n    type: PropTypes.string.isRequired\r\n};\r\n\r\nexport default burgerIngredient;","import React from 'react';\r\nimport './Burger.css';\r\nimport BurgerIngredient from './BurgerIngredents/BurgerIngredient';\r\n\r\nconst burger = (props) => {\r\n    let transformedIngredients = Object.keys( props.ingredients ).map( igKey => {\r\n        return [...Array( props.ingredients[igKey ])].map((_, i) => {\r\n            return <BurgerIngredient key={igKey + i} type={igKey} />\r\n        });\r\n    }).reduce((arr, el) => {\r\n        return arr.concat(el)\r\n    }, []);\r\n    if ( transformedIngredients.length === 0) {\r\n        transformedIngredients = <p> Please add Ingredients</p>;\r\n    }\r\n    return (\r\n        <div className=\"Burger\">\r\n            <BurgerIngredient type=\"bread-top\" />\r\n            {transformedIngredients}\r\n            <BurgerIngredient type=\"bread-bottom\" />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default burger;","import React from 'react';\r\nimport './BuiltControl.css';\r\n\r\nconst builtControl = (props) => (\r\n    <div className=\"BuiltControl\">\r\n        <div className=\"Label\">{props.label}</div>\r\n        <button className=\"Remove\" \r\n                onClick={props.removed} \r\n                disabled={props.disabled}>Remove</button>\r\n        <button className=\"Add\" \r\n                onClick={props.added}>Add</button>\r\n    </div>\r\n);\r\n\r\nexport default builtControl;","import React from 'react';\r\nimport './BuiltControls.css';\r\nimport BuiltControl from './BuiltControl/BuiltControl';\r\n\r\n\r\nconst controls = [\r\n    {label: 'Saled', type: 'saled'},\r\n    {label: 'Bacon', type: 'bacon'},\r\n    {label: 'Cheese', type: 'cheese'},\r\n    {label: 'Meat', type: 'meat'},\r\n];\r\nconst builtControls = (props) => (\r\n    <div className=\"BuiltControls\">\r\n        <p>Current Price: {props.price}</p>\r\n        {controls.map(ctrl => (\r\n            <BuiltControl \r\n                key={ctrl.label} \r\n                label={ctrl.label} \r\n                added={() => props.ingredientAdded(ctrl.type)}\r\n                removed={() => props.ingredientRemoved(ctrl.type)}\r\n                disabled={props.disabled[ctrl.type]} />\r\n        ))}\r\n        <button className=\"OrderButton\"\r\n                disabled={!props.purchasable}\r\n                onClick={props.ordered}>ORDER NOW</button>\r\n    </div>\r\n);\r\n\r\nexport default builtControls;","import React, { Component } from 'react';\r\nimport Auxiliary from '../../hoc/Auxiliary';\r\nimport Burger from '../../components/Burger/Burger';\r\nimport BuiltControls from '../../components/Burger/BuiltControls/BuiltControls';\r\nimport { type } from 'os';\r\n\r\nconst INGREDIENT_PRICES = {\r\n    salad: 5,\r\n    cheese:10,\r\n    mear:12,\r\n    bacon:5\r\n}\r\n\r\nclass BurgerBuilder extends Component {\r\n    state = {\r\n        ingredients: {\r\n            salad: 0,\r\n            bacon: 0,\r\n            cheese: 0,\r\n            meat: 0\r\n        },\r\n        totalPrice: 30,\r\n        purchasable: false\r\n    }\r\n\r\n    updatePurchaseState (ingredients) {\r\n         const sum = Object.keys(ingredients).map(igKey => {\r\n            return ingredients[igKey];\r\n        }).reduce((sum,el) => { \r\n            return sum + el;\r\n        }, 0);\r\n        this.setState({purchasable: sum > 0})\r\n    }\r\n\r\n    addIngredientHandler = (type) => {\r\n        const oldCount = this.state.ingredients[type];\r\n        const updatedCount = oldCount +1;\r\n        const updatedIngredients = {\r\n            ...this.state.ingredients\r\n        };\r\n        updatedIngredients[type] = updatedCount;\r\n        const priceAddition = INGREDIENT_PRICES[type];\r\n        const oldPrice = this.state.totalPrice;\r\n        const newPrice = oldPrice + priceAddition;\r\n        this.setState({totalPrice: newPrice, ingredients: updatedIngredients});\r\n        this.updatePurchaseState (updatedIngredients);\r\n\r\n    }\r\n\r\n    removeIngredientHandler = (type) => {\r\n        const oldCount = this.state.ingredients[type];\r\n        if (oldCount <= 0) {\r\n            return;\r\n        }\r\n        const updatedCount = oldCount - 1;\r\n        const updatedIngredients = {\r\n            ...this.state.ingredients\r\n        };\r\n        updatedIngredients[type] = updatedCount;\r\n        const priceDeduction = INGREDIENT_PRICES[type];\r\n        const oldPrice = this.state.totalPrice;\r\n        const newPrice = oldPrice - priceDeduction;\r\n        this.setState({totalPrice: newPrice, ingredients: updatedIngredients});\r\n        this.updatePurchaseState (updatedIngredients);\r\n\r\n    }\r\n    render() {\r\n        const disabledInfo = {\r\n            ...this.state.ingredients\r\n        };\r\n        for (let key in disabledInfo) {\r\n            disabledInfo[key] = disabledInfo[key] <=0\r\n        }\r\n        return (\r\n            <Auxiliary>\r\n                <Burger ingredients={this.state.ingredients} />     \r\n                <BuiltControls ingredientAdded={this.addIngredientHandler}\r\n                               ingredientRemoved={this.removeIngredientHandler}\r\n                               disabled={disabledInfo}\r\n                               price={this.state.totalPrice} />         \r\n            </Auxiliary>\r\n        );\r\n    }\r\n}\r\n\r\nexport default BurgerBuilder;","import React from 'react';\nimport './App.css';\nimport Layout from './components/Layout/Layout';\nimport BurgerBuilder from './containers/BurgerBuilder/BurgerBuilder';\nimport Burger from './components/Burger/Burger';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Layout>\n        <p>Test</p>\n        <BurgerBuilder />      \n      </Layout>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}